local modem = peripheral.find("modem")
local monitor = peripheral.find("monitor")
local chest = peripheral.find("minecraft:chest") or peripheral.find("minecraft:barrel") or peripheral.find("ironchest:iron_chest")
local tapeDrive = peripheral.find("tape_drive")

if not chest then
    error("Error: Chest not found! Check peripheral name.", 0)
end

-- Base URL for movie files (update this when adding new movies)
local baseURL = "https://raw.githubusercontent.com/robertjojo123/shrek/refs/heads/main/video_part_"
local fpsTarget = 5
local frameDuration = 1 / fpsTarget

-- Function to construct movie URLs
function getMovieURL(index)
    return baseURL .. index .. ".nfv"
end

-- Function to download a video file and save it locally
function downloadVideo(index)
    local url = getMovieURL(index)
    local localFile = "/current_video.nfv"  -- Generic temporary file name

    print("Downloading: " .. url)
    local result = shell.run("wget", url, localFile)

    if result then
        print("Download complete: " .. localFile)
        return localFile
    else
        print("Failed to download: " .. url)
        return nil
    end
end

-- Function to load video data from a file
function loadVideo(videoFile)
    local videoData = {}
    for line in io.lines(videoFile) do
        table.insert(videoData, line)
    end

    local resolution = { videoData[1]:match("(%d+) (%d+)") }
    local fps = tonumber(videoData[1]:match("%d+ %d+ (%d+)"))
    table.remove(videoData, 1)

    return videoData, resolution, fps
end

-- Function to display the next frame
function nextFrame(videoData, resolution, frameIndex)
    if frameIndex > #videoData then
        return false, frameIndex
    end

    local frame = {}
    for i = 1, resolution[2] do
        if frameIndex > #videoData then
            break
        end
        table.insert(frame, videoData[frameIndex])
        frameIndex = frameIndex + 1
    end

    local parsedFrame = paintutils.parseImage(table.concat(frame, "\n"))
    paintutils.drawImage(parsedFrame, 1, 1)

    local startTime = os.clock()
    while (os.clock() - startTime) < frameDuration do
        os.sleep(0.01)
    end

    return true, frameIndex
end

-- Function to play a video
function playVideo(videoFile)
    local videoData, resolution = loadVideo(videoFile)
    local frameIndex = 2

    while true do
        local success
        success, frameIndex = nextFrame(videoData, resolution, frameIndex)
        if not success then return end
    end
end

-- Function to check if the correct tape is already in the drive
function correctTapeInserted(movieName)
    if tapeDrive and tapeDrive.getLabel then
        local label = tapeDrive.getLabel()
        if label and label:lower() == movieName:lower() then
            print("Correct tape already inserted: " .. label)
            return true
        end
    end
    return false
end

-- Function to insert the correct tape into the drive
function insertTape(movieName)
    if not tapeDrive then
        print("Error: Tape Drive not found!")
        return false
    end

    -- Check if the correct tape is already in the drive
    if correctTapeInserted(movieName) then
        return true
    end

    -- No correct tape inside, search in the chest
    local items = chest.list()
    for slot, item in pairs(items) do
        if item.name == "computronics:tape" then
            print("Pulling tape from slot " .. slot .. " into tape drive...")
            chest.pushItems(peripheral.getName(tapeDrive), slot, 1)
            os.sleep(1) -- Wait for tape to insert

            -- Check if the inserted tape has the correct label
            if correctTapeInserted(movieName) then
                return true
            else
                print("Incorrect tape inserted | Ejecting...")
                tapeDrive.eject()
                os.sleep(1) -- Wait before trying the next tape
            end
        end
    end

    print("No matching cassette found for " .. movieName)
    return false
end

function ejectTape()
    if tapeDrive and tapeDrive.getLabel then
        print("Ejecting cassette: " .. (tapeDrive.getLabel() or "unknown"))
        tapeDrive.eject()
        os.sleep(1)
    else
        print("No cassette in drive.")
    end
end

-- Function to play the full movie, looping video parts while the tape plays
function playMovie(movieName)
    local videoIndex = 1
    local allVideosPlayed = false

    if insertTape(movieName) then
        os.sleep(1)
        tapeDrive.play()
        print("Playing cassette for " .. movieName .. "...")

        while not allVideosPlayed do
            -- Download the current video part
            local currentFile = downloadVideo(videoIndex)
            if not currentFile then
                print("No more video parts found. Stopping playback.")
                allVideosPlayed = true
                break
            end

            -- Start downloading the next video part while playing
            local nextIndex = videoIndex + 1
            local nextFile = "/next_video.nfv"
            shell.run("wget", getMovieURL(nextIndex), nextFile, "&")

            -- Play the current video
            playVideo(currentFile)

            -- Delete the played video
            fs.delete(currentFile)

            -- Check if the next video exists
            if fs.exists(nextFile) then
                fs.move(nextFile, "/current_video.nfv") -- Rename it for playback
                videoIndex = nextIndex
            else
                print("No more video parts found. Stopping playback.")
                allVideosPlayed = true
            end
        end

        tapeDrive.stop()
        ejectTape()
    else
        print("Cassette could not be inserted. Aborting playback.")
    end
end

monitor.setTextScale(1)
term.redirect(monitor)

modem.open(100)

print("Waiting for movie selection...")

while true do
    local _, _, _, _, message = os.pullEvent("modem_message")
    
    if message:sub(1, 5) == "play_" then
        local movieName = message:sub(6)
        print("Starting movie: " .. movieName)
        playMovie(movieName)
    end
end
