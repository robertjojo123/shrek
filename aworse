local modem = peripheral.find("modem")
local monitor = peripheral.find("monitor")
local chest = peripheral.find("minecraft:chest") or peripheral.find("minecraft:barrel") or peripheral.find("ironchest:iron_chest")
local tapeDrive = peripheral.find("tape_drive")

if not chest then
    error("Error: Chest not found! Check peripheral name.", 0)
end

-- Base URL for movie files
local baseURL = "https://raw.githubusercontent.com/robertjojo123/shrek/refs/heads/main/video_part_"
local fpsTarget = 5  -- **Target FPS**
local frameDuration = 1000 / fpsTarget  -- **200ms per frame**
local bytesPerFrame = 1200  -- **Each frame corresponds to 1200 bytes**
local framesPerVideo = 225
local videoLengthMs = 45000  -- **Each video should last 45s**
local frameOffset = 41  -- **Start at frame 41 due to download delay**

function getMovieURL(index)
    return baseURL .. index .. ".nfv"
end

function clearOldVideos()
    fs.delete("/current_video.nfv")
    fs.delete("/next_video.nfv")
end

function downloadVideo(index)
    local url = getMovieURL(index)
    local localFile = "/current_video.nfv"

    shell.run("wget", url, localFile)
    return fs.exists(localFile) and localFile or nil
end

function loadVideo(videoFile)
    local videoData = {}
    for line in io.lines(videoFile) do
        table.insert(videoData, line)
    end
    local resolution = { videoData[1]:match("(%d+) (%d+)") }
    table.remove(videoData, 1)

    if #videoData == 0 then
        print("Error: Video data failed to load from " .. videoFile)
    else
        print("Successfully loaded video file:", videoFile)
    end

    return videoData, resolution
end

function playVideo(videoFile, videoIndex, startTime)
    local videoData, resolution = loadVideo(videoFile)
    if not videoData or #videoData == 0 then
        print("Error: No video data found!")
        return
    end

    local frameIndex = frameOffset
    local videoStartTime = startTime + ((videoIndex - 1) * videoLengthMs)

    while frameIndex <= #videoData do
        local currentTime = os.epoch("utc")
        local elapsedTime = currentTime - startTime
        local expectedFrame = math.floor(elapsedTime / frameDuration) * resolution[2]

        -- Ensure we don't overshoot or fall behind
        if expectedFrame > frameIndex then
            frameIndex = expectedFrame
        elseif expectedFrame < frameIndex then
            local sleepTime = (frameDuration - (elapsedTime % frameDuration)) / 1000
            if sleepTime > 0 then os.sleep(sleepTime) end
        end

        -- Draw frame
        monitor.clear()
        if videoData[frameIndex] then
            local frame = paintutils.parseImage(videoData[frameIndex])
            if frame then
                paintutils.drawImage(frame, 1, 1)
                print("Displaying Frame:", frameIndex, " at Time:", elapsedTime, "ms")
            else
                print("Error: Failed to parse frame:", frameIndex)
            end
        else
            print("Warning: Attempted to draw invalid frame:", frameIndex)
        end

        os.queueEvent("frame")
        os.pullEvent("frame")

        frameIndex = frameIndex + resolution[2]
    end
end

function correctTapeInserted(movieName)
    if tapeDrive and tapeDrive.getLabel then
        local label = tapeDrive.getLabel()
        return label and label:lower() == movieName:lower()
    end
    return false
end

function insertTape(movieName)
    if not tapeDrive then return false end

    if correctTapeInserted(movieName) then return true end

    local items = chest.list()
    for slot, item in pairs(items) do
        if item.name == "computronics:tape" then
            chest.pushItems(peripheral.getName(tapeDrive), slot, 1)
            os.sleep(1)

            if correctTapeInserted(movieName) then
                return true
            else
                tapeDrive.eject()
                os.sleep(1)
            end
        end
    end
    return false
end

function rewindTape()
    if tapeDrive and tapeDrive.getSize and tapeDrive.getPosition then
        if tapeDrive.getPosition() > 0 then
            tapeDrive.seek(-tapeDrive.getSize())
            os.sleep(2)
        end
    end
end

function ejectTape()
    if tapeDrive and tapeDrive.getLabel then
        tapeDrive.eject()
        os.sleep(1)
    end
end

function startAudio()
    rewindTape()
    os.sleep(1)
    tapeDrive.play()
end

function playMovie(movieName)
    clearOldVideos()
    local videoIndex = 1

    monitor.setBackgroundColor(colors.black)
    monitor.clear()

    if insertTape(movieName) then
        local startTime = os.epoch("utc")

        parallel.waitForAll(
            function() startAudio() end,
            function()
                while true do
                    local currentFile = downloadVideo(videoIndex)
                    if not currentFile then break end

                    local nextIndex = videoIndex + 1
                    local nextFile = "/next_video.nfv"
                    shell.run("wget", getMovieURL(nextIndex), nextFile, "&")

                    playVideo(currentFile, videoIndex, startTime)
                    fs.delete(currentFile)

                    if fs.exists(nextFile) then
                        fs.move(nextFile, "/current_video.nfv")
                        videoIndex = nextIndex
                    else
                        break
                    end
                end
            end
        )

        tapeDrive.stop()
        ejectTape()
    end
end

monitor.setTextScale(1)
term.redirect(monitor)
modem.open(100)

while true do
    local _, _, _, _, message = os.pullEvent("modem_message")
    if message:sub(1, 5) == "play_" then
        local movieName = message:sub(6)
        playMovie(movieName)
    end
end
