local modem = peripheral.find("modem")
local monitor = peripheral.find("monitor")
local chest = peripheral.find("minecraft:chest") or peripheral.find("minecraft:barrel") or peripheral.find("ironchest:iron_chest")
local tapeDrive = peripheral.find("tape_drive")

if not chest then
    error("Error: Chest not found! Check peripheral name.", 0)
end

-- Base URL for movie files
local baseURL = "https://raw.githubusercontent.com/robertjojo123/shrek/refs/heads/main/video_part_"
local fpsTarget = 5
local frameDuration = 1000 / fpsTarget -- 200ms per frame
local framesPerVideo = 225
local linesPerFrame = 40  -- Each frame consists of 40 lines
local frameBytes = 1200  -- Each frame should match 1200 bytes on the tape

function getMovieURL(index)
    return baseURL .. index .. ".nfv"
end

function clearOldVideos()
    fs.delete("/current_video.nfv")
    fs.delete("/next_video.nfv")
end

function downloadVideo(index)
    local url = getMovieURL(index)
    local localFile = "/current_video.nfv"

    shell.run("wget", url, localFile)
    return fs.exists(localFile) and localFile or nil
end

function loadVideo(videoFile)
    local videoData = {}
    for line in io.lines(videoFile) do
        table.insert(videoData, line)
    end
    local resolution = { videoData[1]:match("(%d+) (%d+)") }
    table.remove(videoData, 1)
    return videoData, resolution
end

function playVideo(videoFile, globalStartTime, videoIndex)
    local videoData, resolution = loadVideo(videoFile)
    local frameIndex = 1 -- Start at frame 1 for all videos
    local startTapePos = tapeDrive.getPosition()
    
    -- **Frame timestamps pre-calculated**
    local frameTimestamps = {}
    for i = 1, framesPerVideo do
        frameTimestamps[i] = globalStartTime + ((i - 1) * frameDuration)
    end

    while frameIndex <= #videoData do
        local currentTime = os.epoch("utc")
        local elapsedBytes = tapeDrive.getPosition() - startTapePos

        -- **Check if we need to display a new frame**
        if currentTime >= frameTimestamps[frameIndex] then
            -- **Draw the frame**
            local frame = {}
            for i = 1, resolution[2] do
                if frameIndex > #videoData then break end
                table.insert(frame, videoData[frameIndex])
                frameIndex = frameIndex + 1
            end

            local parsedFrame = paintutils.parseImage(table.concat(frame, "\n"))
            paintutils.drawImage(parsedFrame, 1, 1)

            -- **Yield so it doesn't freeze**
            os.queueEvent("frame")
            os.pullEvent("frame")
        end

        -- **Short sleep prevents unnecessary CPU load**
        os.sleep(0.05)
    end

    return os.epoch("utc") -- Return updated time for next video
end

function correctTapeInserted(movieName)
    if tapeDrive and tapeDrive.getLabel then
        local label = tapeDrive.getLabel()
        return label and label:lower() == movieName:lower()
    end
    return false
end

function insertTape(movieName)
    if not tapeDrive then return false end

    if correctTapeInserted(movieName) then return true end

    local items = chest.list()
    for slot, item in pairs(items) do
        if item.name == "computronics:tape" then
            chest.pushItems(peripheral.getName(tapeDrive), slot, 1)
            os.sleep(1)

            if correctTapeInserted(movieName) then
                return true
            else
                tapeDrive.eject()
                os.sleep(1)
            end
        end
    end
    return false
end

function rewindTape()
    if tapeDrive and tapeDrive.getSize and tapeDrive.getPosition then
        if tapeDrive.getPosition() > 0 then
            tapeDrive.seek(-tapeDrive.getSize())
            os.sleep(2)
        end
    end
end

function ejectTape()
    if tapeDrive and tapeDrive.getLabel then
        tapeDrive.eject()
        os.sleep(1)
    end
end

function playMovie(movieName)
    clearOldVideos()
    local videoIndex = 1
    local globalStartTime = nil

    monitor.setBackgroundColor(colors.black)
    monitor.clear()

    if insertTape(movieName) then
        rewindTape()
        os.sleep(1)

        -- **Start the audio & sync global time at this moment**
        tapeDrive.play()
        globalStartTime = os.epoch("utc")

        while true do
            local currentFile = downloadVideo(videoIndex)
            if not currentFile then break end

            local nextIndex = videoIndex + 1
            local nextFile = "/next_video.nfv"
            shell.run("wget", getMovieURL(nextIndex), nextFile, "&")

            -- **Ensure correct frameIndex tracking**
            globalStartTime = playVideo(currentFile, globalStartTime, videoIndex)
            fs.delete(currentFile)

            if fs.exists(nextFile) then
                fs.move(nextFile, "/current_video.nfv")
                videoIndex = nextIndex
            else
                break
            end
        end

        tapeDrive.stop()
        ejectTape()
    end
end

monitor.setTextScale(1)
term.redirect(monitor)
modem.open(100)

while true do
    local _, _, _, _, message = os.pullEvent("modem_message")
    if message:sub(1, 5) == "play_" then
        local movieName = message:sub(6)
        playMovie(movieName)
    end
end
